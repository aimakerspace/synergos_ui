# Define the user that will own and run the Nginx server
user  nginx;
# Define the number of worker processes; recommended value is the number of
# cores that are being used by your server
worker_processes  1;

# Define the location on the file system of the error log, plus the minimum
# severity to log messages for
error_log  /var/log/nginx/error.log warn;
# Define the file that will store the process ID of the main NGINX process
pid        /var/run/nginx.pid;


# events block defines the parameters that affect connection processing.
events {
    # Define the maximum number of simultaneous connections that can be opened by a worker process
    worker_connections  1024;
}


# http block defines the parameters for how NGINX should handle HTTP web traffic
http {
    # Include the file defining the list of file types that are supported by NGINX
    include       /etc/nginx/mime.types;
    # Define the default file type that is returned to the user
    default_type  text/html;

    # Define the format of log messages.
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Define the location of the log of access attempts to NGINX
    access_log  /var/log/nginx/access.log  main;

    # Define the parameters to optimize the delivery of static content
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay    on;

    # Define the timeout value for keep-alive connections with the client
    keepalive_timeout  65;

    # Define the usage of the gzip compression algorithm to reduce the amount of data to transmit
    #gzip  on;

    # Include additional parameters for virtual host(s)/server(s)
    #include /etc/nginx/sites-enabled/*.conf;
#    upstream rabbitmq {
#        server docker.for.mac.localhost:15672 max_fails=0;
#    }
    server {
        # Define the server name, IP address, and/or port of the server
        listen 80;
        server_name localhost;
        # Define the specified charset to the “Content-Type” response header field
        charset utf-8;

        location / {
            # Define the location of the proxy server to send the request to
            # proxy_pass http://docker.for.mac.localhost:8080/;
            proxy_pass http://localhost:8080/;
        }

        location /mlflow {
            # proxy_pass url MUST end with slash here for subpaths
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-MLFlow-Server-URL http://$server_name/mlflow/;
            proxy_buffering  off;
            rewrite ^/mlflow$ /mlflow/ permanent;
            rewrite          ^/mlflow/(.*)$  /$1  break;
            # proxy_pass       http://docker.for.mac.localhost:15000/;
            proxy_pass       http://localhost:15000/;

        }

#        location /rabbitmq/api/ {
#            rewrite ^ $request_uri;
#            rewrite ^/rabbitmq/api/(.*) /api/$1 break;
#            return 400;
#            #proxy_pass http://docker.for.mac.localhost:15672$uri;
#            proxy_pass http://rabbitmq$uri;
#        }
#
#        location /rabbitmq {
#            rewrite ^/rabbitmq$ /rabbitmq/ permanent;
#            rewrite ^/rabbitmq/(.*)$ /$1 break;
#            #proxy_pass http://docker.for.mac.localhost:15672/;
#            proxy_pass http://rabbitmq;
#            proxy_buffering                    off;
#            proxy_set_header Host              $http_host;
#            proxy_set_header X-Real-IP         $remote_addr;
#            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#        }
#
#        location /amundsen {
#            rewrite ^/amundsen$ /amundsen/ permanent;
#            rewrite ^/amundsen/(.*)$ /$1 break;
#            proxy_pass http://docker.for.mac.localhost:5000/;
#            #proxy_pass http://docker.for.mac.localhost:5100/; # remote
#            proxy_buffering                    off;
#            proxy_set_header Host              $http_host;
#            proxy_set_header X-Real-IP         $remote_addr;
#            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#        }
#
#        location /neo4j {
#            rewrite ^/neo4j$ /neo4j/ permanent;
#            rewrite ^/neo4j/(.*)$ /browser/$1 break;
#            proxy_pass http://docker.for.mac.localhost:7473/; # remote
#            proxy_buffering                    off;
#            proxy_set_header Host              $http_host;
#            proxy_set_header X-Real-IP         $remote_addr;
#            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
#            proxy_set_header X-Forwarded-Proto $scheme;
#
#            add_header X-Frame-Options "SAMEORIGIN" always;
#            add_header Content-Security-Policy "frame-src 'self' localhost/neo4j/";
#            add_header "Access-Control-Allow-Origin"  * always;
#
#        }
#
#        location /graylog {
#            proxy_set_header Host $http_host;
#            proxy_set_header X-Forwarded-Host $host;
#            proxy_set_header X-Forwarded-Server $host;
#            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#            proxy_set_header X-Graylog-Server-URL http://$server_name/graylog/;
#            proxy_buffering  off;
#            rewrite ^/graylog$ /graylog/ permanent;
#            rewrite ^/graylog/(.*)$ /$1 break;
#            #rewrite          ^/graylog/(.*)$  /$1  break;
#            proxy_pass       http://docker.for.mac.localhost:9000/;
#            # Simple requests
#            if ($request_method ~* "(GET|POST)") {
#              add_header "Access-Control-Allow-Origin"  * always;
#
#              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
#              add_header 'Access-Control-Allow-Credentials' 'true' always;
#              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
#              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
#            }
#
#            # Preflighted requests
#            if ($request_method = OPTIONS ) {
#                add_header 'Access-Control-Max-Age' 1728000;
#                add_header 'Content-Type' 'text/plain charset=UTF-8';
#                add_header 'Content-Length' 0;
#
#
#              add_header "Access-Control-Allow-Origin"  * always;
#              add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD" always;
#              add_header "Access-Control-Allow-Headers" "Authorization, Origin, X-Requested-With, Content-Type, Accept" always;
#              return 200;
#            }
#        }

    }

}

